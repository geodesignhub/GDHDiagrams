/**
   *
   * @param {PortalGroup} portalGroup
   */
  initializeGroupLayers({portalGroup}) {

    // FIND GROUP LAYERS //
    const groupLayersList = document.getElementById('group-layers-list');
    if (portalGroup) {

      // ASK PORTAL GROUP TO RETURN PORTAL ITEMS //
      portalGroup.queryItems().then(({results}) => {

        // LAYER PORTAL ITEMS //
        const layerPortalItems = results.filter(item => item.isLayer);

        // LAYER LIST ITEMS //
        const layerListItems = layerPortalItems.map(this.createLayerListItem.bind(this));

        // ADD LAYER LIST ITEMS //
        groupLayersList.replaceChildren(...layerListItems);
      });

    } else {
      groupLayersList.replaceChildren();
    }
  }

   /**
     *
     * @param {Portal} portal
     */
    /*initializeGroupSelection({portal}) {

      // FIND GROUP //
      const groupsList = document.getElementById('groups-list');
      groupsList.addEventListener('calciteListChange', ({detail}) => {
        // GROUP ID //
        const groupId = detail.keys().next().value;

        // ASK PORTAL TO FIND GROUP //
        portal.queryGroups({query: `id: ${ groupId }`}).then(({results}) => {

          // CLEAR MAP LAYERS //
          this.dispatchEvent(new CustomEvent('layers-clear', {detail: {}}));

          // LIST THE GROUP LAYERS //
          this.initializeGroupLayers({portalGroup: results[0]});

        });
      });

    }*/


/**
   *
   * @param {MapView} view
   */
  initializeSketchTools({view}) {
    require([
      'esri/core/reactiveUtils',
      'esri/layers/GraphicsLayer',
      "esri/widgets/Expand",
      'esri/widgets/Sketch'
    ], (reactiveUtils, GraphicsLayer, Expand, Sketch) => {

      // SKETCH LAYER //
      const sketchLayer = new GraphicsLayer({listMode: 'hide'});
      view.map.add(sketchLayer);

      // SKETCH //
      const sketch = new Sketch({
        view,
        layer: sketchLayer,
        creationMode: 'single',
        availableCreateTools: ['polygon', 'rectangle', 'circle'],
        defaultCreateOptions: {mode: 'hybrid'},
        visibleElements: {
          selectionTools: {
            "rectangle-selection": false,
            "lasso-selection": false
          }
        }
      });

      // WHEN A NEW SKETCH HAS BEEN CREATED //
      sketch.on("create", (event) => {
        if (event.state === "complete") {
          this.dispatchEvent(new CustomEvent('analysis-geometry', {detail: {geometry: event.graphic.geometry}}));
        }
      });

      // SKETCH EXPAND //
      const sketchExpand = new Expand({view, content: sketch});
      view.ui.add(sketchExpand, {position: 'top-right', index: 0});

    });
  }
